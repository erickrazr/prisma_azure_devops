version: 0.2

phases:
  pre_build:
    commands:
      - echo Logging in to Amazon ECR - INFRA-REPO...
      - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
  build:
    commands:
      - echo APP Build started on `date`
      - echo Building the Docker image..
      - docker build -t alpine-infra-image:latest .
      - docker tag $IMAGE_REPO_NAME:$IMAGE_TAG $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_APP_REPO_NAME:$IMAGE_TAG
       - echo Downloading twistcli
      - curl -k -u $prisma_cloud_compute_username:$prisma_cloud_compute_password --output ./twistcli $prisma_cloud_compute_url/api/v1/util/twistcli
      - pwd
      - ls
      - chmod +x ./twistcli
      - echo Scanning with twistcli
      
      # Run the scan with twistcli, providing detailed results in CodeBuild and
      # pushing the results to the Twistlock console.
      # --details returns all vulnerabilities & compliance issues rather than just summaries.
      # -address points to our Twistlock console
      # -u and -p provide credentials for the console.  These creds only need the CI User role.
      # Finally, we provide the name of the image we built with 'docker build', above.
      
      - ./twistcli images scan --details --address $prisma_cloud_compute_url -user $prisma_cloud_compute_username --password $prisma_cloud_compute_password $IMAGE_APP_REPO_NAME:$IMAGE_TAG
      
  post_build:
    commands:
      - echo Build completed on `date`
      - echo Pushing the Docker image...
      - docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_APP_REPO_NAME:$IMAGE_TAG
